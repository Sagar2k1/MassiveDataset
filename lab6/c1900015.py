# -*- coding: utf-8 -*-
"""C1900015.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M6x_q6J_g2Q1gaOHuvfSdE6eAOCZrKsl
"""

path = '/content/sample_data/mnist_train_small.csv'

!apt-get install openjdk-8-jdk-headless -qq > /dev/null
!wget -q https://archive.apache.org/dist/spark/spark-3.2.2/spark-3.2.2-bin-hadoop3.2.tgz
!tar xf spark-3.2.2-bin-hadoop3.2.tgz

!pip install -q findspark

import os

os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-8-openjdk-amd64"
os.environ["SPARK_HOME"] = "/content/spark-3.2.2-bin-hadoop3.2"
! echo $SPARK_HOME

!ls

import findspark
findspark.init()

from pyspark import SparkContext
from pyspark.sql import SQLContext
from pyspark.sql import functions as func

sc = SparkContext("local", "DataFrame")
sqlc = SQLContext(sc)

df = sqlc.read.csv(path, header=False)
col_name = df.columns

from pyspark.sql.functions import col, lit, monotonically_increasing_id
from pyspark.ml.linalg import Vectors

label_name = df[0]
data_name = [df[i] for i in col_name[1:len(col_name)]]

label = df.select(df[0])
data = df.select(data_name)
#*[F.col('Phone')[i].alias(f'Phone{str(i+1)}') for i in range(3)]
data = df.rdd.flatMap(lambda x: [(int(x[0]),Vectors.dense([int(x[i]) for i in range(1,len(col_name))]))]).collect()
new_data = data[:100]

print(new_data[-1])

df2 = sqlc.createDataFrame(new_data,['label','data'])

df2.show()

df3 = df2.withColumn("idx", monotonically_increasing_id())
df3.show()

from pyspark.ml.feature import MinHashLSH

mh = MinHashLSH()

mh.setInputCol("data")
mh.setOutputCol("hashes")

mh.setSeed(32)

model = mh.fit(df3)
model.setInputCol("data")

model.transform(df3)

model.approxSimilarityJoin(df3, df3, 0.25, distCol="JaccardDistance").select(
    col("datasetA.idx").alias("idA"),
    col("datasetB.idx").alias('idB'),
    col("JaccardDistance")
).head(3)

model.approxSimilarityJoin(df3, df3, 0.25, distCol="JaccardDistance").select(
    col("datasetA.idx").alias("idA"),
    col("datasetB.idx").alias('idB'),
    col("JaccardDistance")
).show()

